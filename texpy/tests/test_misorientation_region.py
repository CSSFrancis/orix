import pytest
import numpy as np

from texpy.quaternion.symmetry import Symmetry
from texpy.quaternion.orientation_region import MisorientationRegion

pair1 = ('432', '2')
n1 = np.array([
    [ 0.     , -1.     ,  0.     ,  0.     ],
    [ 0.38268,  0.     , -0.92388, -0.     ],
    [ 0.38268, -0.     , -0.     , -0.92388],
    [ 0.38268,  0.     ,  0.     ,  0.92388],
    [ 0.38268, -0.     ,  0.92388,  0.     ],
    [ 0.38268,  0.92388,  0.     , -0.     ],
    [ 0.5    ,  0.5    , -0.5    , -0.5    ],
    [ 0.5    ,  0.5    , -0.5    ,  0.5    ],
    [ 0.5    ,  0.5    ,  0.5    , -0.5    ],
    [ 0.5    ,  0.5    ,  0.5    ,  0.5    ]
])
v1 = np.array([
    [-0.86286, -0.     , -0.35741,  0.35741],
    [-0.86286, -0.     ,  0.35741, -0.35741],
    [-0.85355,  0.14645, -0.35355, -0.35355],
    [-0.85355,  0.14645,  0.35355,  0.35355],
    [-0.85355,  0.35355, -0.35355, -0.14645],
    [-0.85355,  0.35355, -0.14645,  0.35355],
    [-0.85355,  0.35355,  0.14645, -0.35355],
    [-0.85355,  0.35355,  0.35355,  0.14645],
    [ 0.85355, -0.35355, -0.35355,  0.14645],
    [ 0.85355, -0.35355, -0.14645, -0.35355],
    [ 0.85355, -0.35355,  0.14645,  0.35355],
    [ 0.85355, -0.35355,  0.35355, -0.14645],
    [ 0.85355, -0.14645, -0.35355,  0.35355],
    [ 0.85355, -0.14645,  0.35355, -0.35355],
    [ 0.86286,  0.     , -0.35741, -0.35741],
    [ 0.86286,  0.     ,  0.35741,  0.35741]
])

pair2 = ('4/mmm', '2/m')
n2 = np.array([
    [ 0.     , -1.     ,  0.     ,  0.     ],
    [ 0.     ,  0.     ,  0.     ,  1.     ],
    [ 0.38268, -0.     , -0.     , -0.92388],
    [ 0.70711,  0.     , -0.70711,  0.     ],
    [ 0.70711, -0.     ,  0.70711, -0.     ],
    [ 0.70711,  0.5    , -0.5    ,  0.     ],
    [ 0.70711,  0.5    ,  0.5    , -0.     ],
    [ 0.70711,  0.70711,  0.     ,  0.     ]
])
v2 = np.array([
    [-0.70711, -0.     ,  0.70711,  0.     ],
    [-0.6786 , -0.     ,  0.6786 , -0.28108],
    [-0.6786 ,  0.28108,  0.6786 ,  0.     ],
    [-0.6786 ,  0.6786 ,  0.28108,  0.     ],
    [-0.65328,  0.2706 , -0.65328, -0.2706 ],
    [-0.65328,  0.65328, -0.2706 , -0.2706 ],
    [ 0.65328, -0.65328, -0.2706 ,  0.2706 ],
    [ 0.65328, -0.2706 , -0.65328,  0.2706 ],
    [ 0.6786 , -0.6786 ,  0.28108, -0.     ],
    [ 0.6786 , -0.28108,  0.6786 , -0.     ],
    [ 0.6786 ,  0.     ,  0.6786 ,  0.28108],
    [ 0.70711,  0.     ,  0.70711, -0.     ]
])

pair3 = ('m', 'm')
n3 = np.array([
    [0, 0, 0, 1],
])
v3 = np.array([
    [0, -1, 0, 0],
    [0, 0, -1, 0],
    [0, 0, 1, 0],
    [0, 1, 0, 0],
])

pair4 = ('23', '23')
n4 = np.array([
    [5e-06, -0.707107,         0,  0.707107],
    [5e-06, -0.707107,  0.707107,         0],
    [5e-06,  0.707107,         0,  0.707107],
    [5e-06,  0.707107,  0.707107,         0],
    [  0.5,      -0.5,      -0.5,      -0.5],
    [  0.5,      -0.5,      -0.5,       0.5],
    [  0.5,      -0.5,       0.5,      -0.5],
    [  0.5,       0.5,      -0.5,      -0.5],
    [  0.5,       0.5,      -0.5,       0.5],
    [  0.5,       0.5,       0.5,      -0.5],
])
v4 = np.array([
    [       -1,            0, -7.07107e-06, -7.07107e-06],
    [-0.707109,  5.00002e-06,    -0.707104,            0],
    [ 0.707109,  5.00002e-06,            0,     0.707104],
    [ 0.866025,    -0.288679,     0.288673,     0.288673],
    [ 0.866025,     0.288679,     0.288673,     0.288673],
])

pair5 = ('4/m', '4/m')
n5 = np.array([
    [   5e-06, -1, 0,        0],
    [   5e-06,  0, 0,        1],
    [   5e-06,  0, 1,        0],
    [0.382683,  0, 0, -0.92388],
    [0.382683,  0, 0,  0.92388],
])
v5 = np.array([
    [      -1,      -5e-06,       5e-06,       5e-06],
    [       0,          -1,           0,           0],
    [       0,           0,           1,           0],
    [ 0.92388,  4.6194e-06, -4.6194e-06,    0.382683],
])

pair6 = ('2', '2')
n6 = np.array([
    [   5e-06,        -1,         0,         0],
    [0.707107,         0,         0, -0.707107],
    [0.707107,         0,         0,  0.707107],
])
v6 = np.array([
    [0, 0, -1, 0],
    [0, 0,  1, 0],
])

pair7 = ('mm2', 'mm2')
n7 = np.array([
    [   5e-06,        -1,        0,         0],
    [   5e-06,         0,        1,         0],
    [0.707107,         0,        0, -0.707107],
    [0.707107,         0,        0,  0.707107],
])
v7 = np.array([
    [-0.707107, -3.53553e-06,  3.53553e-06,     0.707107],
    [        0,           -1,            0,            0],
    [        0,            0,            1,            0],
    [ 0.707107,  3.53553e-06, -3.53553e-06,     0.707107],
])

pair8 = ('-4', '-4')
n8 = np.array([
    [   5e-06,        -1,        0,         0],
    [   5e-06,         0,        0,         1],
    [0.707107,         0,        0, -0.707107],
    [0.707107,         0,        0,  0.707107],
])
v8 = np.array([
    [0,  0, -1,  0],
    [0,  0,  1,  0],
])

pair9 = ('32', '32')
n9 = np.array([
    [   5e-06,        -1,         0,         0],
    [   5e-06,      -0.5,  0.866025,         0],
    [   5e-06,         0,         0,         1],
    [     0.5,         0,         0, -0.866025],
    [0.707107, -0.353553, -0.612372,         0],
    [0.707107,  0.353553, -0.612372,         0],
    [0.707107,  0.353553,  0.612372,         0],
    [0.707107,  0.707107,         0,         0],
])
v9 = np.array([
    [       -1,        5e-06, -2.88675e-06,       -5e-06],
    [-0.654655,     0.654651,     0.377967, -3.27327e-06],
    [-0.612372,            0,    -0.707107,    -0.353553],
    [-0.612372,     0.612372,    -0.353553,    -0.353553],
    [ 0.612372,    -0.612372,    -0.353553,     0.353553],
    [ 0.654654,    -0.654654,     0.377964, -3.27327e-06],
    [ 0.654654,            0,     0.755929, -3.27327e-06],
    [ 0.866025,  4.33013e-06,     -2.5e-06,          0.5],
])

pair10 = ('-42m', '-42m')
n10 = np.array([
    [   5e-06, -0.707107,  0.707107,         0],
    [   5e-06,         0,         0,         1],
    [   5e-06,  0.707107,  0.707107,         0],
    [0.707107, -0.707107,         0,         0],
    [0.707107,         0, -0.707107,         0],
    [0.707107,         0,         0, -0.707107],
    [0.707107,  0.707107,         0,         0],
])
v10 = np.array([
    [-1.    ,  0.    ,  0.    ,  0.    ],
    [-0.5774, -0.5774, -0.5774,  0.    ],
    [-0.5   ,  0.5   , -0.5   , -0.5   ],
    [ 0.5   ,  0.5   ,  0.5   ,  0.5   ],
    [ 0.5774, -0.5774,  0.5774, -0.    ],
    [ 0.7071,  0.    , -0.    ,  0.7071]
])


def idfn(pair):
    return '-'.join(pair)


@pytest.fixture
def misorientation_region(request):
    cs1, cs2 = request.param
    cs1, cs2 = Symmetry.from_symbol(cs1), Symmetry.from_symbol(cs2)
    return MisorientationRegion.from_symmetry(cs1, cs2)


@pytest.mark.parametrize('misorientation_region, normals, vertices', [
    (pair1, n1, v1),
    (pair2, n2, v2),
    (pair3, n3, v3),
    (pair4, n4, v4),
    (pair5, n5, v5),
    (pair6, n6, v6),
    (pair7, n7, v7),
    (pair8, n8, v8),
    (pair9, n9, v9),
    (pair10, n10, v10)
], indirect=['misorientation_region'], ids=idfn)
def test_misorientation_region(misorientation_region, normals, vertices):
    n = misorientation_region.normals.numerical_sort().data
    v = misorientation_region.vertices.numerical_sort().data
    print(v.round(4))
    assert n.shape == normals.shape
    assert np.allclose(n, normals, atol=1e-4)
    assert v.shape == vertices.shape
    assert np.allclose(v, vertices, atol=1e-4)


@pytest.mark.parametrize('misorientation_region, normals', [
    (('4/m', '4/m'), np.array([[0, 0, 1], [-1, 0, 0], [0, 1, 0]]))
], indirect=['misorientation_region'])
def test_axis_sector(misorientation_region, normals):
    a = misorientation_region.axis_sector()
    assert np.allclose(a.normals.data, normals)